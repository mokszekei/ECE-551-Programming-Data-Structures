Mini-Project Option: Efficient Frontier
=======================================

For this mini-project option, you will write a program to find the
efficient frontier, or optimal set of portfolios, given a list of
financial assets and their standard deviation, average return, and
correlation matrix.


Step 1: 
------------------------------

  Write a program "efficient_frontier", which takes two command line
  arguments, the name of a file with a universe of assets with given
  standard deviation and average return, and the name of a file that
  gives their correlation matrix.

  In this step, you will calculate and print the covariance matrix,
  given by the formula

  cov(i,j) = correl(i,j)*std(i)*std(j)

  where i is the row index, j is the column index, and correl is the
  correlation of those elements, std is the standard deviation of that
  element. 
  
  As sample data, you have assets.csv, which gives data on
  international equities, commodities, real estate, investment-grade
  corporate bonds, inflation-linked, medium term (7-10yr) US Treasury
  bonds, and short term (1-3yr) US Treasury bonds. You also have their
  average (annualized) returns and standard deviations. In
  correlation.csv, you have their correlations over the period March
  2009 (the end of the credit crisis bear market) to June 2015.

Step 2: 
------------------------------

  The efficient frontier is a hyperbola representing the boundary of
  all possible portfolios that can be created from the assets
  provided. From these assets, we need to find the optimal (least
  risky â€“ i.e. lowest volatility) portfolio for each level of expected
  portfolio return.

  A portfolio has a vector of weights, indicating how much of the
  portfolio is invested in each asset. These weights sum to 1. Your
  task is to estimate the optimal weights, i.e. minimum volatility,
  for each return level between 5% and 26% in 1% increments.

  The formula for portfolio variance is

  var = sum_i sum_j w(i)*w(j)*cov(i,j)

  where w is an element in the vector of weights. The standard
  deviation (or volatility) is the square root of the variance. 

  For this step, print a comma-separated list of the return and the
  minimum volatility for that rate of return. In this part, assume
  that short sales are allowed (the weights can be negative).

  For example, the values for 1-4% are:

  ROR,volatility
  1.0%,0.78%
  2.0%,1.09%
  3.0%,1.59%
  4.0%,2.13%

  Optimizing this problem is tricky, as it is a constrained quadratic
  optimization problem. You are free to use any method you like to
  implement the optimization, but one to consider is the Frank-Wolfe
  algorithm,
  https://en.wikipedia.org/wiki/Frank%E2%80%93Wolfe_algorithm

Step 3: 
------------------------------

  In this step, you will add an additional constraint that no short
  sales are allowed. That is, all weights must be nonnegative. 

  Again, print a comma-separated list of the return and the minimum
  volatility for that rate of return.

  When no short sales are allowed, the values for 1-4% are:

  ROR,volatility
  1.0%,0.96%
  2.0%,1.20%
  3.0%,1.71%
  4.0%,2.28%

Step 4: 
------------------------------

  Implement the optimization with an alternative algorithm (you might
  consider templating a class over what kind of optimization scheme it
  uses). Consider barrier method or projected gradient descent.

A note on object orientation
----------------------------

  Think about what aspects of this program are nouns, what each noun
  has, and what verbs are associated with each.

  An Asset has a standard deviation and expected return. A Portfolio
  has a list of weights and a list of Assets, from which the portfolio
  volatility and rate of return can be calculated. You might have an
  Optimizer class to aid in the abstraction for Step 4. You might
  template the Optimizer over whether it is restricted or not (whether
  short sales are restricted).
