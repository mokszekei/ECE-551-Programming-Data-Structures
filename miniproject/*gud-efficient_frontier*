Current directory is ~/intro_prog/miniproject/
GNU gdb (Ubuntu 8.1-0ubuntu3) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from efficient_frontier...done.
(gdb) start
Temporary breakpoint 1 at 0x21e3: file efficient_frontier.cpp, line 11.
Starting program: /home/sm745/intro_prog/miniproject/efficient_frontier assets.csv correlation.csv

Temporary breakpoint 1, main (argc=3, argv=0x7fffffffe488) at efficient_frontier.cpp:11
warning: Source file is more recent than executable.
11	int main(int argc, char ** argv) {
(gdb) n
12	  if (argc != 3) {
(gdb) n
16	  std::ifstream f1(argv[1]);
(gdb) n
17	  if (!f1) {
(gdb) n
21	  std::ifstream f2(argv[2]);
(gdb) n
22	  if (!f2) {
(gdb) n
27	  portfolio portfolio;
(gdb) n
29	    portfolio.read_correlation(f2);
(gdb) s
portfolio::read_correlation (this=0x7fffffffdf00, f=...) at efficient_frontier.h:36
36	  void read_correlation(std::ifstream & f) {
(gdb) n
37	    std::string line;
(gdb) n
38	    std::getline(f, line);
(gdb) n
39	    std::size_t p1 = 0;
(gdb) n
40	    std::size_t p2 = 0;
(gdb) n
41	    int row_num = 0;
(gdb) n
42	    while (std::getline(f, line)) {
(gdb) n
43	      std::vector<double> temp;
(gdb) n
44	      int col_num = 0;
(gdb) n
45	      while (line.find(',', p2) != std::string::npos) {
(gdb) n
46	        p1 = line.find(',', p2);
(gdb) n
47	        p2 = line.find('%', p1);
(gdb) n
48	        if (p2 == std::string::npos) {
(gdb) p1
Undefined command: "p1".  Try "help".
(gdb) p p1
$1 = 11
(gdb) p p2
$2 = 15
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
52	        if (!isdigit(key[0]) && key[0] != '-') {
(gdb) p key
$3 = "100"
(gdb) n
55	        temp.push_back(std::stod(key) / 100);
(gdb) n
56	        col_num++;
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
45	      while (line.find(',', p2) != std::string::npos) {
(gdb) n
46	        p1 = line.find(',', p2);
(gdb) n
47	        p2 = line.find('%', p1);
(gdb) n
48	        if (p2 == std::string::npos) {
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) p p1
$4 = 16
(gdb) p p
No symbol "p" in current context.
(gdb) p p2
$5 = 19
(gdb) n
52	        if (!isdigit(key[0]) && key[0] != '-') {
(gdb) n
55	        temp.push_back(std::stod(key) / 100);
(gdb) p key
$6 = "32"
(gdb) n
56	        col_num++;
(gdb) p temp
$7 = std::vector of length 2, capacity 2 = {1, 0.32000000000000001}
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
45	      while (line.find(',', p2) != std::string::npos) {
(gdb) n
46	        p1 = line.find(',', p2);
(gdb) n
47	        p2 = line.find('%', p1);
(gdb) n
48	        if (p2 == std::string::npos) {
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
52	        if (!isdigit(key[0]) && key[0] != '-') {
(gdb) n
55	        temp.push_back(std::stod(key) / 100);
(gdb) n
56	        col_num++;
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
45	      while (line.find(',', p2) != std::string::npos) {
(gdb) n
46	        p1 = line.find(',', p2);
(gdb) n
47	        p2 = line.find('%', p1);
(gdb) n
48	        if (p2 == std::string::npos) {
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
52	        if (!isdigit(key[0]) && key[0] != '-') {
(gdb) n
55	        temp.push_back(std::stod(key) / 100);
(gdb) n
56	        col_num++;
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
45	      while (line.find(',', p2) != std::string::npos) {
(gdb) n
46	        p1 = line.find(',', p2);
(gdb) n
47	        p2 = line.find('%', p1);
(gdb) n
48	        if (p2 == std::string::npos) {
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
52	        if (!isdigit(key[0]) && key[0] != '-') {
(gdb) n
55	        temp.push_back(std::stod(key) / 100);
n
56	        col_num++;
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
n
45	      while (line.find(',', p2) != std::string::npos) {
(gdb) n
46	        p1 = line.find(',', p2);
(gdb) n
47	        p2 = line.find('%', p1);
(gdb) n
48	        if (p2 == std::string::npos) {
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
52	        if (!isdigit(key[0]) && key[0] != '-') {
(gdb) p key
$8 = "51"
(gdb) n
55	        temp.push_back(std::stod(key) / 100);
(gdb) n
56	        col_num++;
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
45	      while (line.find(',', p2) != std::string::npos) {
(gdb) n
46	        p1 = line.find(',', p2);
(gdb) n
47	        p2 = line.find('%', p1);
(gdb) n
48	        if (p2 == std::string::npos) {
(gdb) p1
Undefined command: "p1".  Try "help".
(gdb) p p1
$9 = 38
(gdb) pp2
Undefined command: "pp2".  Try "help".
(gdb) p p2
$10 = 42
(gdb) p line.length()
$11 = 44
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
52	        if (!isdigit(key[0]) && key[0] != '-') {
(gdb) p key
$12 = "-16"
(gdb) n
55	        temp.push_back(std::stod(key) / 100);
(gdb) n
56	        col_num++;
(gdb) p temp
$13 = std::vector of length 7, capacity 8 = {1, 0.32000000000000001, -0.02, -0.29999999999999999, -0.19, 0.51000000000000001, -0.16}
(gdb) n
51	        std::string key = line.substr(p1 + 1, p2 - p1 - 1);
(gdb) n
45	      while (line.find(',', p2) != std::string::npos) {
(gdb) n
58	      if (row_num == 0) {
(gdb) n
59	        nA = col_num;
(gdb) n
66	      correlation.push_back(temp);
(gdb) p nA
$14 = 7
(gdb) p row_num
$15 = 0
(gdb) n
67	      row_num++;
(gdb) n
43	      std::vector<double> temp;
(gdb) n
42	    while (std::getline(f, line)) {
(gdb) n
43	      std::vector<double> temp;
(gdb) n
44	      int col_num = 0;
(gdb) n
45	      while (line.find(',', p2) != std::string::npos) {
(gdb) n
58	      if (row_num == 0) {
(gdb) p p2
$16 = 42
(gdb) q

Debugger finished
