
#include "retirement.h"

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* function reads each line from a file between the specified dates,
   rorFromLine fcn ptr indicates how ror should be calculated 
   based on type of input data */

b_pair_t rorFromLine_bond(char * str) {
  b_pair_t b_pair;
  char * p = strchr(str, ',');
  if (p == NULL) {
    exit(EXIT_FAILURE);
  }
  p = p + 1;
  b_pair.bond_ror = strtod(p, NULL);
  b_pair.dates = strtod(str, &p);
  return b_pair;
}

int check_date(char * line, double date) {
  char * p = strchr(line, ',');
  if (strtod(line, &p) >= date) {
    return 1;
  }
  else {
    return 0;
  }
}

int check_startdate(char * line, double date) {
  char * p = strchr(line, ',');
  if (strtod(line, &p) > date) {
    return 1;
  }
  else {
    return 0;
  }
}

b_ror_arr_t * readFile_bond(FILE * f,
                            double start,
                            double end,
                            b_pair_t (*rorFromLine_bond)(char *)) {
  // WRITE ME
  if (f == NULL) {
    return NULL;
  }
  b_ror_arr_t * b_ror_arr = malloc(sizeof(*b_ror_arr));
  b_ror_arr->b_pair = NULL;
  b_ror_arr->n = 0;
  char ** line = NULL;
  size_t * n = 0;
  while (getline(line, n, f) >= 0) {
    if (check_startdate(*line, start)) {
      printf("startdate is before the first date in file");
      exit(EXIT_FAILURE);
    }
    if (check_date(*line, start)) {
      b_ror_arr->n++;
      b_ror_arr->b_pair =
          realloc(b_ror_arr->b_pair, b_ror_arr->n * sizeof(*b_ror_arr->b_pair));
      b_ror_arr->b_pair[b_ror_arr->n - 1] = rorFromLine_bond(*line);
    }
    if (check_date(*line, end)) {
      break;
    }
  }
  if (b_ror_arr->b_pair[b_ror_arr->n - 1].dates < end) {
    printf("End day exceed the last day in the file");
    exit(EXIT_FAILURE);
  }
  free(*line);
  return b_ror_arr;
}

sp_pair_t rorFromLine_sp(char * str) {
  sp_pair_t sp_pair;
  char * p1 = strchr(str, ',');
  if (p1 == NULL) {
    exit(EXIT_FAILURE);
  }
  char * p2 = strchr(p1, ',');
  if (p2 == NULL) {
    exit(EXIT_FAILURE);
  }
  sp_pair.div = strtod(p2 + 1, NULL);
  sp_pair.sp = strtod(p1 + 1, &p2);
  sp_pair.dates = strtod(str, &p1);
  return sp_pair;
}

double previous_date_calculator(double date) {
  if (date - (int)date == 0) {
    return date - 0.89;
  }
  else {
    return date - 0.01;
  }
}

sp_ror_arr_t * readFile_sp(FILE * f,
                           double start,
                           double end,
                           sp_pair_t (*rorFromLine_sp)(char *)) {
  // WRITE ME
  if (f == NULL) {
    return NULL;
  }
  //When we need to calculate the equities ROR we need to know the S&P ROR in the previous month.
  //So the strat day should be one month earlier.
  start = previous_date_calculator(start);
  sp_ror_arr_t * sp_ror_arr = malloc(sizeof(*sp_ror_arr));
  sp_ror_arr->sp_pair = NULL;
  sp_ror_arr->n = 0;
  char ** line = NULL;
  size_t * n = 0;
  while (getline(line, n, f) >= 0) {
    if (check_startdate(*line, start)) {
      printf("startdate is before the first date in file");
      exit(EXIT_FAILURE);
    }
    if (check_date(*line, start)) {
      sp_ror_arr->n++;
      sp_ror_arr->sp_pair =
          realloc(sp_ror_arr->sp_pair, sp_ror_arr->n * sizeof(*sp_ror_arr->sp_pair));
      sp_ror_arr->sp_pair[sp_ror_arr->n - 1] = rorFromLine_sp(*line);
    }
    if (check_date(*line, end)) {
      break;
    }
  }
  if (sp_ror_arr->sp_pair[sp_ror_arr->n - 1].dates < end) {
    printf("End day exceed the last day in the file");
    exit(EXIT_FAILURE);
  }
  free(line);
  return sp_ror_arr;
}

double sp_ror_calculator(double sp, double last_sp, double div) {
  double result = sp / last_sp - 1 + div / 12 / sp;
  return result;
}

double b_ror_calculator(double bond) {
  return bond / 12;
}

summary_arr_t * ror_calculater(sp_ror_arr_t * sp_ror_arr, b_ror_arr_t * b_ror_arr) {
  double start = b_ror_arr->b_pair[0].dates;
  double num = b_ror_arr->n;
  summary_arr_t * summary_arr = malloc(sizeof(*summary_arr));
  summary_arr->summary = malloc(num * (sizeof(*summary_arr->summary)));
  for (int i = 0; i < num; i++) {
    summary_arr->summary[i].dates = b_ror_arr->b_pair[i].dates;
    summary_arr->summary[i].bond_ror = b_ror_arr->b_pair[i].bond_ror / 12;
    summary_arr->summary[i].sp_ror = sp_ror_calculator(sp_ror_arr->sp_pair[i + 1].sp,
                                                       sp_ror_arr->sp_pair[i].sp,
                                                       sp_ror_arr->sp_pair[i].div);
    summary_arr->summary[i].deposit =
        100 * pow((1 + 0.025), ((int)summary_arr->summary[i].dates - (int)start));
    summary_arr->summary[i].sp_percentage =
        1 * pow((0.98), ((int)summary_arr->summary[i].dates - (int)start));
  }
  summary_arr->n = num;
}

ret_portfolio_t

    void
    free(b_ror_arr_t * b_ror_arr,
         sp_ror_arr_t * sp_ror_arr,
         summary_arr_t * summary_arr) {
  free(b_ror_arr->b_pair);
  free(b_ror_arr);
  free(sp_ror_arr->sp_pair);
  free(sp_ror_arr);
  free(summary_arr->summary);
  free(summary_arr);
}

void free_portfolio(ret_portfolio_t * portfolio) {
  free(portfolio->cum_invest);
  free(portfolio->dates);
  free(portfolio);
}
